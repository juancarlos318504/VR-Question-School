{"version":3,"sources":["App.js","serviceWorker.js","firebaseConfig.js","index.js"],"names":["App","useState","FlagVideo","setFlagVideo","UserName","setUserName","Cont","setCont","Progression","setProgression","unityContent","UnityContent","process","on","flag","parseInt","i","name","progressionVal","storage","firebase","database","capturing","setCapturing","recordedChunks","setRecordedChunks","webcamRef","useRef","mediaRecorderRef","handleDataAvailable","useCallback","data","size","prev","concat","handleStartCaptureClick","current","MediaRecorder","stream","mimeType","addEventListener","start","handleStopCaptureClick","stop","handleSend","userName","console","log","length","blob","Blob","type","ref","put","then","snapshot","getDownloadURL","downloadURL","update","url","send","URL","createObjectURL","a","document","createElement","body","appendChild","style","href","download","click","window","revokeObjectURL","className","height","display","role","width","aria-valuenow","aria-valuemin","aria-valuemax","Math","round","audio","maxHeight","onClick","Boolean","location","hostname","match","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8QAoMeA,MA9Lf,WAAgB,IAAD,EACqBC,mBAAS,GAD9B,mBACNC,EADM,KACKC,EADL,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGWJ,mBAAS,GAHpB,mBAGNK,EAHM,KAGAC,EAHA,OAIyBN,mBAAS,GAJlC,mBAINO,EAJM,KAIOC,EAJP,KAMPC,EAAe,IAAIC,eACvBC,kDACAA,6CAQFF,EAAaG,GAAG,eAAe,SAACC,GAC9BX,EAAaY,SAASD,OAGxBJ,EAAaG,GAAG,kBAAkB,SAACG,GACjCT,EAAQS,MAGVN,EAAaG,GAAG,YAAY,SAACI,GAC3BZ,EAAYY,MAGdP,EAAaG,GAAG,YAAY,SAACK,GAC3BT,EAAgC,IAAjBS,MAIjB,IAAMC,EAAUC,YACVC,EAAWD,aAlCJ,EAqCqBnB,oBAAS,GArC9B,mBAqCNqB,EArCM,KAqCKC,EArCL,OAsC+BtB,mBAAS,IAtCxC,mBAsCNuB,EAtCM,KAsCUC,EAtCV,KAuCPC,EAAYC,iBAAO,MACnBC,EAAmBD,iBAAO,MAC1BE,EAAsBC,uBAC1B,YAAe,IAAZC,EAAW,EAAXA,KACGA,EAAKC,KAAO,GACdP,GAAkB,SAACQ,GAAD,OAAUA,EAAKC,OAAOH,QAG5C,CAACN,IAGGU,EAA0BL,uBAAY,WAC1CP,GAAa,GACbK,EAAiBQ,QAAU,IAAIC,cAAcX,EAAUU,QAAQE,OAAQ,CACrEC,SAAU,eAEZX,EAAiBQ,QAAQI,iBACvB,gBACAX,GAEFD,EAAiBQ,QAAQK,UACxB,CAACZ,IAEEa,EAAyBZ,uBAAY,WACzCF,EAAiBQ,QAAQO,OACzBpB,GAAa,KACZ,CAACK,IAEEgB,EAAad,uBAAY,WAC7B,IAAMe,EAAWzC,EAEjB,GADA0C,QAAQC,IAAIF,GACRrB,EAAewB,OAAQ,CACzB,IAAMC,EAAO,IAAIC,KAAK1B,EAAgB,CACpC2B,KAAM,eAIWhC,EAAQiC,IAAR,kBACNP,EADM,qBACevC,EADf,UAGR+C,IAAIJ,GAAMK,MAAK,SAAUC,GAClCA,EAASH,IAAII,iBAAiBF,MAAK,SAACG,GAClCX,QAAQC,IAAIU,GACZpC,EACG+B,IADH,gBACgBP,EADhB,oBACoCvC,IACjCoD,OAAO,CAAEC,IAAKF,IAxEvBX,QAAQC,IAAI,MACZrC,EAAakD,KAAK,OAAQ,gBAyEpBzD,EAAa,GACbI,EAAQ,MAEVuC,QAAQC,IAAI,+BAKd,IAAMY,EAAME,IAAIC,gBAAgBb,GAC1Bc,EAAIC,SAASC,cAAc,KACjCD,SAASE,KAAKC,YAAYJ,GAC1BA,EAAEK,MAAQ,gBACVL,EAAEM,KAAOV,EACTI,EAAEO,SAAF,gBAAsBzB,EAAtB,qBAA2CvC,EAA3C,SACAyD,EAAEQ,QACFC,OAAOX,IAAIY,gBAAgBd,GAC3BlC,EAAkB,OAEnB,CAACnB,EAAMF,EAAUoB,EAAgBL,IAEpC,OACE,yBAAKuD,UAAU,mBACb,yBAAKA,UAAU,mCACb,yBACEA,UAAU,WACVN,MAAO,CACLO,OAAQ,OACRC,QAAuB,IAAd1E,EAAkB,QAAU,SAGvC,kBAAC,IAAD,CAAOQ,aAAcA,IACpBF,GAAe,IACd,GAEA,yBAAKkE,UAAU,YACb,yBACEA,UAAU,eACVG,KAAK,cACLT,MAAO,CAAEU,MAAM,GAAD,OAAKtE,EAAL,MACduE,gBAAevE,EACfwE,gBAAc,IACdC,gBAAc,OANhB,UAOKC,KAAKC,MAAM3E,GAPhB,SAYR,yBAAKkE,UAAU,8BACE,IAAdxE,EACC,yBAAKwE,UAAU,YAGb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,aACb,kIAIA,kBAAC,IAAD,CACEA,UAAU,sBACVU,OAAO,EACPhC,IAAK1B,EACL0C,MAAO,CAAEiB,UAAW,YAI1B,yBAAKX,UAAU,8BACb,yBAAKA,UAAU,aACZpD,EACC,4BACEoD,UAAU,sCACVY,QAAS5C,GAFX,sBAOA,4BACEgC,UAAU,uCACVY,QAASnD,GAFX,wBAODX,EAAewB,OAAS,GACvB,4BACE0B,UAAU,uCACVY,QAAS,kBAAM1C,EAAWxC,KAF5B,0CAYV,MCjLUmF,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DClBN,IAUiBC,EAVM,CACnBC,OAAQ,0CACRC,WAAY,sCACZC,YAAa,6CACbC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,eACnBC,MAAO,6CCEX9E,gBAAuBuE,GAEvBQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrC,SAASsC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/D,QAAQ+D,MAAMA,EAAMC,c","file":"static/js/main.667c4431.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from \"react\";\r\nimport Unity, { UnityContent } from \"react-unity-webgl\";\r\nimport Webcam from \"react-webcam\";\r\n\r\nimport * as firebase from \"firebase\";\r\n\r\nfunction App() {\r\n  const [FlagVideo, setFlagVideo] = useState(0);\r\n  const [UserName, setUserName] = useState(\"\");\r\n  const [Cont, setCont] = useState(1);\r\n  const [Progression, setProgression] = useState(0);\r\n\r\n  const unityContent = new UnityContent(\r\n    process.env.PUBLIC_URL + \"/MyGame/360_vr_rh_build.json\",\r\n    process.env.PUBLIC_URL + \"/MyGame/UnityLoader.js\"\r\n  );\r\n\r\n  const nextQuestion = () => {\r\n    console.log(\"gg\");\r\n    unityContent.send(\"Menu\", \"nextQuestion\");\r\n  };\r\n\r\n  unityContent.on(\"createVideo\", (flag) => {\r\n    setFlagVideo(parseInt(flag));\r\n  });\r\n\r\n  unityContent.on(\"numberQuestion\", (i) => {\r\n    setCont(i);\r\n  });\r\n\r\n  unityContent.on(\"userName\", (name) => {\r\n    setUserName(name);\r\n  });\r\n\r\n  unityContent.on(\"progress\", (progressionVal) => {\r\n    setProgression(progressionVal * 100);\r\n  });\r\n\r\n  /* firebase  */\r\n  const storage = firebase.storage();\r\n  const database = firebase.database();\r\n\r\n  /* videoCapturing */\r\n  const [capturing, setCapturing] = useState(false);\r\n  const [recordedChunks, setRecordedChunks] = useState([]);\r\n  const webcamRef = useRef(null);\r\n  const mediaRecorderRef = useRef(null);\r\n  const handleDataAvailable = useCallback(\r\n    ({ data }) => {\r\n      if (data.size > 0) {\r\n        setRecordedChunks((prev) => prev.concat(data));\r\n      }\r\n    },\r\n    [setRecordedChunks]\r\n  );\r\n\r\n  const handleStartCaptureClick = useCallback(() => {\r\n    setCapturing(true);\r\n    mediaRecorderRef.current = new MediaRecorder(webcamRef.current.stream, {\r\n      mimeType: \"video/webm\",\r\n    });\r\n    mediaRecorderRef.current.addEventListener(\r\n      \"dataavailable\",\r\n      handleDataAvailable\r\n    );\r\n    mediaRecorderRef.current.start();\r\n  }, [handleDataAvailable]);\r\n\r\n  const handleStopCaptureClick = useCallback(() => {\r\n    mediaRecorderRef.current.stop();\r\n    setCapturing(false);\r\n  }, [mediaRecorderRef]);\r\n\r\n  const handleSend = useCallback(() => {\r\n    const userName = UserName;\r\n    console.log(userName);\r\n    if (recordedChunks.length) {\r\n      const blob = new Blob(recordedChunks, {\r\n        type: \"video/webm\",\r\n      });\r\n\r\n      /* send data to firebase */\r\n      const storageRef = storage.ref(\r\n        `/videos/${userName}/pregunta-${Cont}.webm`\r\n      );\r\n      storageRef.put(blob).then(function (snapshot) {\r\n        snapshot.ref.getDownloadURL().then((downloadURL) => {\r\n          console.log(downloadURL);\r\n          database\r\n            .ref(`users/${userName}/answers/${Cont}`)\r\n            .update({ url: downloadURL });\r\n          nextQuestion();\r\n          setFlagVideo(0);\r\n          setCont(2);\r\n        });\r\n        console.log(\"Uploaded a blob or file!\");\r\n      });\r\n\r\n      /* end sed data to firebase */\r\n\r\n      const url = URL.createObjectURL(blob);\r\n      const a = document.createElement(\"a\");\r\n      document.body.appendChild(a);\r\n      a.style = \"display: none\";\r\n      a.href = url;\r\n      a.download = `video-${userName}-pregunta-${Cont}.webm`;\r\n      a.click();\r\n      window.URL.revokeObjectURL(url);\r\n      setRecordedChunks([]);\r\n    }\r\n  }, [Cont, UserName, recordedChunks, storage]);\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <div className=\"row justify-content-center mt-4\">\r\n        <div\r\n          className=\"col-md-8\"\r\n          style={{\r\n            height: \"35em\",\r\n            display: FlagVideo !== 1 ? \"block\" : \"none\",\r\n          }}\r\n        >\r\n          <Unity unityContent={unityContent} />\r\n          {Progression >= 100 ? (\r\n            \"\"\r\n          ) : (\r\n            <div className=\"progress\">\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                style={{ width: `${Progression}%` }}\r\n                aria-valuenow={Progression}\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n              >{`${Math.round(Progression)}%`}</div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"row justify-content-center\">\r\n        {FlagVideo === 1 ? (\r\n          <div className=\"col-md-8\">\r\n            {/* <Webcam audio={true} videoConstraints={videoConstraints} /> */}\r\n\r\n            <div className=\"container-fluid\">\r\n              <div className=\"row justify-content-center\">\r\n                <div className=\"col-md-10\">\r\n                  <p>\r\n                    Según la pregunta anterior, comparta su respuesta, pulsando\r\n                    en el botón iniciar grabación.\r\n                  </p>\r\n                  <Webcam\r\n                    className=\"embed-responsive mt\"\r\n                    audio={true}\r\n                    ref={webcamRef}\r\n                    style={{ maxHeight: \"35em\" }}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"row justify-content-center\">\r\n                <div className=\"col-md-10\">\r\n                  {capturing ? (\r\n                    <button\r\n                      className=\"btn btn-danger btn-lg btn-block m-2\"\r\n                      onClick={handleStopCaptureClick}\r\n                    >\r\n                      Parar Grabación\r\n                    </button>\r\n                  ) : (\r\n                    <button\r\n                      className=\"btn btn-success btn-lg btn-block m-2\"\r\n                      onClick={handleStartCaptureClick}\r\n                    >\r\n                      Iniciar Grabación\r\n                    </button>\r\n                  )}\r\n                  {recordedChunks.length > 0 && (\r\n                    <button\r\n                      className=\"btn btn-primary btn-lg btn-block m-2\"\r\n                      onClick={() => handleSend(UserName)}\r\n                    >\r\n                      Descargar y Enviar Video Respuesta\r\n                    </button>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const firebaseConfig = {\r\n    apiKey: \"AIzaSyB87hUpHIVwPyeYy4AmNuftz3-DrtbUxw0\",\r\n    authDomain: \"vr-questions-school.firebaseapp.com\",\r\n    databaseURL: \"https://vr-questions-school.firebaseio.com\",\r\n    projectId: \"vr-questions-school\",\r\n    storageBucket: \"vr-questions-school.appspot.com\",\r\n    messagingSenderId: \"540938104666\",\r\n    appId: \"1:540938104666:web:9b55e10bc937a6f30ecd63\"\r\n  };\r\n\r\n  export default firebaseConfig;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport * as firebase from \"firebase\";\r\nimport firebaseConfig from \"./firebaseConfig\";\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}